const l = [1, 1, 1, 2, 2, 3, 3, 3, 2, 4, 5, 5, 4, 5, 4];
// const l = [10000000, 5000000, 5000000, 10000000, 10000000, 5000000, 5000000, 2500000, 2500000, 2500000, 3333333, 1666666, 1, 1, 3333333];
const n = 8;

// const string = '4 1 5 2 1 5 2 5 2 3 4 1 5 4 4 5 5 3 4 1 5 5 4 5 1 1 2 3 1 2 5 3 4 1 4 4 2 1 3 3 5 4 1 5 1 4 2 5 2 1 2 2 1 1 1 1 1 2 1 3 1 1 2 2 3 4 1 4 2 4 2 1 5 1 5 2 1 2 1 1 3 1 4 1 4 5 4 5 3 1 4 4 1 2 1 5 4 3 2 4 1 4 4 1 5 4 3 5 3 3 4 3 1 2 4 2 1 2 5 1 3 4 1 3 4 4 1 4 2 1 2 2 4 5 4 4 4 5 1 3 3 5 4 5 4 4 3 2 2 1 1 4 5 4 5 4 2 4 1 4 2 2 3 1 4 4 4 5 3 2 1 5 5 3 4 1 4 1 3 3 2 5 2 4 1 4 3 3 5 1 2 4 1 1 1 2 4 2 4 4 4 1 1 1 5 4 1 3 3 1 5 1 2 4 1 1 3 2 5 5 4 1 3 4 3 1 1 2 2 3 3 3 5 4 3 3 5 3 5 3 2 2 1 3 4 3 1 5 2 4 2 3 2 2 3 3 2 1 5 3 4 1 1 4 2 2 5 4 1 1 2 3 1 5 5 5 3 1 5 2 1 2 5 2 4 1 3 2 5 1 5 2 3 1 3 1 2 2 1 2 2 1 2 5 2 5 3 5 5 5 2 4 4 1 2 1 4 4 3 2 1 1 1 3 3 5 5 5 1 2 1 2 5 2 1 5 3 2 4 4 2 1 3 1 5 2 1 1 2 1 3 2 2 1 2 1 1 2 5 5 3 1 5 3 2 5 3 5 2 4 1 5 5 5 3 1 1 3 2 4 2 4 3 3 4 5 5 5 3 4 4 2 4 2 2 1 5 3 3 4 3 1 4 1 5 3 3 5 2 3 1 4 1 1 5 4 4 2 1 3 3 4 4 5 4 1 4 4 2 5 4 5 4 5 1 4 1 3 5 5 2 1 3 2 2 4 3 1 5 5 5 3 1 3 3 4 5 5 1 1 2 5 1 3 1 5 3 1 4 5 5 1 3 4 1 1 2 5 4 2 2 4 2 4 3 5 5 3 1 2 3 2 4 2 3 4 2 3 4 5 9999996 9999997 9999998 10000000 9999999 9999998 9999995 9999998 9999999 9999998 9999995 9999995 10000000 9999996 9999996 9999998 10000000 9999996 9999997 10000000 9999995 9999995 9999999 10000000 9999997 9999997 9999997 9999995 9999997 10000000 9999999 9999996 9999997 9999997 10000000 9999996 9999997 9999998 9999999 9999998 9999996 9999997 9999998 9999996 10000000 9999997 9999997 9999997 10000000 9999997 9999999 9999996 9999999 10000000 9999998 9999997 9999997 9999999 9999996 9999999 9999995 9999995 9999998 9999996 9999996 9999997 9999995 9999996 9999999 10000000 9999995 9999997 10000000 9999995 9999998 9999999 9999998 9999997 9999999 9999998 9999996 10000000 10000000 9999996 9999997 9999996 9999997 9999995 9999995 10000000 9999996 9999998 9999996 9999996 9999996 9999995 9999997 9999999 9999996 10000000 9999996 9999995 9999995 9999996 9999996 9999995 9999996 9999997 9999999 9999998 9999997 10000000 9999996 9999998 9999995 9999999 9999997 10000000 10000000 10000000 9999998 9999996 9999999 9999999 9999995 9999998 9999995 9999996 10000000 9999999 10000000 9999996 10000000 9999995 9999999 9999998 9999998 9999996 9999999 9999998 9999997 10000000 10000000 9999999 9999998 9999999 9999996 10000000 9999997 9999999 9999999 9999997 9999995 9999998 9999995 9999998 9999997 9999997 9999999 9999998 9999996 9999997 9999999 9999997 9999996 9999995 9999996 9999995 9999996 9999996 9999999 9999996 9999998 9999996 9999995 9999998 10000000 9999995 9999999 9999997 9999996 9999995 9999996 9999995 9999996 9999998 9999995 9999995 9999998 9999995 9999997 9999995 9999996 9999996 9999996 9999999 9999995 9999997 9999999 9999999 9999996 9999995 9999996 9999998 9999999 9999997 9999995 9999997 9999997 9999995 9999995 10000000 9999997 9999996 10000000 9999998 9999995 9999996 10000000 9999997 9999998 9999997 9999999 9999997 10000000 9999998 9999997 10000000 9999997 9999999 10000000 9999997 9999996 9999998 9999995 10000000 9999997 9999997 9999999 9999998 9999995 9999998 9999998 10000000 9999995 9999995 9999995 10000000 9999997 9999999 9999996 9999995 9999995 10000000 9999998 9999995 9999996 9999996 10000000 9999997 9999998 10000000 9999997 9999998 9999996 10000000 10000000 9999998 10000000 9999999 9999995 10000000 9999999 10000000 9999997 10000000 9999997 9999998 9999996 9999999 9999998 9999998 9999999 9999995 9999996 9999998 9999997 9999998 9999997 9999995 9999997 9999997 9999999 9999995 9999995 10000000 9999999 9999999 9999995 9999996 9999998 9999998 10000000 9999998 10000000 9999995 9999997 9999998 9999998 9999998 9999999 9999996 9999995 9999998 9999996 9999999 9999998 9999999 9999997 9999998 9999996 9999999 9999998 10000000 9999998 9999995 9999997 9999995 9999999 9999997 10000000 9999996 9999996 9999998 9999998 9999999 10000000 9999998 9999998 9999996 9999999 9999996 9999996 9999996 9999997 9999999 10000000 9999997 9999995 9999996 9999997 9999995 9999999 9999998 9999999 9999995 10000000 9999997 9999999 9999998 9999996 9999995 9999999 10000000 9999999 9999997 9999999 9999997 9999995 9999998 9999998 9999995 9999998 9999995 9999999 9999995 9999996 9999999 9999997 9999999 9999996 10000000 10000000 9999995 9999998 10000000 9999999 9999995 9999996 9999998 9999997 9999998 9999999 9999999 10000000 9999997 9999999 9999997 9999998 10000000 9999997 9999999 9999996 9999995 9999996 9999996 9999998 9999998 9999996 10000000 9999998 9999999 9999998 9999999 9999995 9999997 10000000 10000000 9999996 9999998 9999997 9999999 10000000 9999995 9999997 9999998 9999998 9999999 9999996 9999999 9999996 9999998 9999997 9999995 9999999 9999997 9999997 9999996 9999997 9999998 9999996 9999995 9999997 9999996 9999995 9999995 9999998 9999996 10000000 9999995 9999998 9999998 10000000 10000000 9999999 9999999 9999998 9999999 9999997 9999997 9999997 9999996 9999995 9999996 9999998 9999995 9999997 9999998 9999999 9999996 9999997 9999999 9999997 9999999 10000000 10000000 9999995 9999999 9999997 9999997 9999996 9999995 9999998 9999995 9999998 9999996 9999998 9999995 9999999 9999997 10000000 10000000 9999999 10000000 9999998 9999999 9999996 9999996 9999998 10000000';
// const l = string.split(' ');

const solution = (num, arr) => {

    function k_combinations(set, k = 6) {
        var i, j, combs, head, tailcombs;
        
        // There is no way to take e.g. sets of 5 elements from
        // a set of 4.
        if (k > set.length || k <= 0) {
            return [];
        }
        
        // K-sized set has only one K-sized subset.
        if (k == set.length) {
            return [set];
        }
        
        // There is N 1-sized subsets in a N-sized set.
        if (k == 1) {
            combs = [];
            for (i = 0; i < set.length; i++) {
                combs.push([set[i]]);
            }
            return combs;
        }

        combs = [];
        for (i = 0; i < set.length - k + 1; i++) {
            head = set.slice(i, i + 1);
            console.log(head);
            tailcombs = k_combinations(set.slice(i + 1), k - 1);
            console.log(tailcombs);
            for (j = 0; j < tailcombs.length; j++) {
                combs.push(head.concat(tailcombs[j]));
            }
        }
        console.log(combs)
        return combs;
    }

    const allChoices = k_combinations(arr);
    let answerAcc = 0;

    // Array of all possible options. Each option is distinct set of 6 sticks. All of them must be used in building a square to return true as an answer. Otherwise option returns "false".
    allChoices.forEach(el => {
        // console.log(el)
        let side = Math.max(...el);

        if (el.reduce((acc, cur) => acc + cur, 0) == 4 * side) {

            let sideCount = el.reduce((acc, cur) => {
                if (cur == side) {
                    acc++;
                }
                return acc;
            }, 0);
            
            let sumRest = el.reduce((acc, cur) => {
                if (cur != side) {
                    return acc + cur;
                }
                return acc;
            }, 0);

            let maxValue = 0;
            let minValue = side;
            let elMaxComp = el.forEach(val => {
                if (val != side && val > maxValue) {
                    maxValue = val;
                }
                if (val < minValue) {
                    minValue = val;
                }
            })
            
            if (sideCount == 2 && sumRest == side * 2 && maxValue + minValue == side || sideCount == 3 && sumRest == side) {
                answerAcc ++;
            }
        }
    })
    console.log(answerAcc)
    
    return answerAcc;
};

solution(n, l);

const suitabilityCheck = () => {

}





